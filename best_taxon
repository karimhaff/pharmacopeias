import requests
import pandas as pd
import ast
from math import radians, sin, cos, sqrt, atan2, pi

def haversine_distance(coord1, coord2):
    R = 6371  # Radius of Earth in km
    lat1, lon1 = coord1
    lat2, lon2 = coord2
    dlat = radians(lat2 - lat1)
    dlon = radians(lon2 - lon1)
    a = sin(dlat / 2) * sin(dlat / 2) + cos(radians(lat1)) * cos(radians(lat2)) * sin(dlon / 2) * sin(dlon / 2)
    c = 2 * atan2(sqrt(a), sqrt(1 - a))
    distance = R * c
    return distance

# to load the data with GBIF children IDs that was extracted
data_with_children = pd.read_csv('word_to_link_with_gbif_id_children_validation.csv')

# to initialize lists to store best taxon information
best_taxon_ids = []
best_taxon_names = []
best_taxon_scores = []

radii = [50, 500, 1500]
baghdad_lat = 33.3
baghdad_lon = 44.4

coefficients = {50: 0.9, 500: 0.6, 1500: 0.3}

# to iterate over each row in the df
for index, row in data_with_children.iterrows():
    gbif_children = row['gbif_children']
    
    if pd.notna(gbif_children):
        taxon_ids = [child.split(':')[1] for child in ast.literal_eval(gbif_children)]

        densities = {taxon_id: {} for taxon_id in taxon_ids}
        species_names = {}
        final_scores = {}
        total_occurrences = {taxon_id: 0 for taxon_id in taxon_ids}

        for taxon_id in taxon_ids:
            query_params = {
                'decimalLatitude': f'{baghdad_lat - 15},{baghdad_lat + 15}',
                'decimalLongitude': f'{baghdad_lon - 15},{baghdad_lon + 15}',
                'taxonKey': taxon_id,
                'limit': 300
            }

            response = requests.get('https://api.gbif.org/v1/occurrence/search', params=query_params)

            if response.status_code == 200:
                occurrence_data = response.json()

                # to check if there are any results before accessing the first element
                if occurrence_data['results']:
                    first_result = occurrence_data['results'][0]
                    species_name = first_result.get('species', "Unknown")
                    species_names[taxon_id] = species_name

                    occurrences_in_radii = {radius: 0 for radius in radii}
                    for occurrence in occurrence_data['results']:
                        lat = occurrence.get('decimalLatitude')
                        lon = occurrence.get('decimalLongitude')

                        if lat and lon:
                            distance = haversine_distance((baghdad_lat, baghdad_lon), (lat, lon))
                            for radius in radii:
                                if distance <= radius:
                                    occurrences_in_radii[radius] += 1

                    for radius in radii:
                        circle_area = pi * radius ** 2
                        density = occurrences_in_radii[radius] / circle_area
                        densities[taxon_id][radius] = density
                else:
                    densities[taxon_id] = {radius: 0 for radius in radii}  # Set densities to 0 if theres no results
            else:
                densities[taxon_id] = {radius: 0 for radius in radii}  # Set densities to 0 if error

        # for calculating densities and total occurrences
        for radius in radii:
            try:
                max_density_for_zone = max(densities[taxon_id][radius] for taxon_id in taxon_ids)
            except ValueError:
                max_density_for_zone = 0  # to handle empty sequence

            if max_density_for_zone == 0:
                continue

            for taxon_id in taxon_ids:
                coefficient = (densities[taxon_id][radius] / max_density_for_zone) * coefficients[radius]
                total_occurrences[taxon_id] += densities[taxon_id][radius] * (pi * radius ** 2)
                if taxon_id not in final_scores or coefficient > final_scores[taxon_id]:
                    final_scores[taxon_id] = coefficient

        # for adjusting scores for total occurrences
        if total_occurrences:
            max_total_occurrences = max(total_occurrences.values())
            if max_total_occurrences > 0:
                for taxon_id in taxon_ids:
                    
                    final_scores[taxon_id] += (total_occurrences[taxon_id] / max_total_occurrences) * 0.1

        # to find the best scoring taxon
        if final_scores:
            best_taxon_id = max(final_scores, key=final_scores.get)
            best_taxon_score = final_scores[best_taxon_id]
            best_taxon_name = species_names.get(best_taxon_id, "Unknown")
        else:
            best_taxon_id = None
            best_taxon_name = None
            best_taxon_score = None
    else:
        best_taxon_id = None
        best_taxon_name = None
        best_taxon_score = None

    # to append best taxon information to lists
    best_taxon_ids.append(best_taxon_id)
    best_taxon_names.append(best_taxon_name)
    best_taxon_scores.append(best_taxon_score)

# to add the best taxon information to the df
data_with_children['best_taxon_id'] = best_taxon_ids
data_with_children['best_taxon_name'] = best_taxon_names
data_with_children['best_taxon_score'] = best_taxon_scores
data_with_children.to_csv('word_to_link_with_best_candidate.csv', index=False)
print(f"\nBest Taxon Information Updated in the DataFrame")
